/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package GUI;

import java.awt.Dimension;
import java.awt.Font;
import javax.swing.JLabel;
import javax.swing.table.DefaultTableCellRenderer;

/**
 *
 * @author Michelle Alvarado
 */
public class MiniPC extends javax.swing.JFrame {

    /**
     * Creates new form MiniPC
     */
    public MiniPC() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelsSliderContainer = new rojerusan.RSPanelsSlider();
        miniCPUContainer = new keeptoo.KGradientPanel();
        arrivalTimePanel = new javax.swing.JPanel();
        arrivalTimeTag = new javax.swing.JLabel();
        firstProcessesScrollPane = new javax.swing.JScrollPane();
        firstProcessesTable = new javax.swing.JTable();
        arrivalTimeButtonAccept = new javax.swing.JButton();
        processesScrollPane = new javax.swing.JScrollPane();
        processesTable = new javax.swing.JTable();
        headerContainer = new javax.swing.JPanel();
        openFilesButton = new javax.swing.JButton();
        startButton = new javax.swing.JButton();
        configButton = new javax.swing.JButton();
        cpuTimeTitle = new javax.swing.JLabel();
        cpuTimeValue = new javax.swing.JLabel();
        memoryTagContainer = new javax.swing.JPanel();
        memoryTag = new javax.swing.JLabel();
        processesTagContainer = new javax.swing.JPanel();
        processesTag = new javax.swing.JLabel();
        executionTagContainer = new javax.swing.JPanel();
        executionTag = new javax.swing.JLabel();
        coresScrollPane = new javax.swing.JScrollPane();
        coresTable = new javax.swing.JTable();
        IRScrollPane = new javax.swing.JScrollPane();
        IRTable = new javax.swing.JTable();
        executionScrollPane = new javax.swing.JScrollPane();
        executionTable = new javax.swing.JTable();
        memoriesTabbedPane = new javax.swing.JTabbedPane();
        mainMemoryPanelContainer = new javax.swing.JPanel();
        mainMemoryScrollPane = new javax.swing.JScrollPane();
        mainMemoryTable = new javax.swing.JTable();
        secondaryMemoryPanelContainer = new javax.swing.JPanel();
        secondaryMemoryScrollPane = new javax.swing.JScrollPane();
        secondaryMemoryTable = new javax.swing.JTable();
        statisticsTagContainer = new javax.swing.JPanel();
        statisticsTag = new javax.swing.JLabel();
        displayScrollPane = new javax.swing.JScrollPane();
        displayTable = new javax.swing.JTable();
        statisticsScrollPane = new javax.swing.JScrollPane();
        statisticsTable = new javax.swing.JTable();
        displayTagContainer = new javax.swing.JPanel();
        displayTag = new javax.swing.JLabel();
        trAveragePanel = new javax.swing.JPanel();
        trAverageTitle = new javax.swing.JLabel();
        trAverageValue = new javax.swing.JLabel();
        trTsAveragePanel = new javax.swing.JPanel();
        trTsAverageTitle = new javax.swing.JLabel();
        trTsAverageValue = new javax.swing.JLabel();
        configContainer = new keeptoo.KGradientPanel();
        backToCPUButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MiniPC SO");

        panelsSliderContainer.setBackground(new java.awt.Color(255, 193, 167));
        panelsSliderContainer.setFocusable(false);
        panelsSliderContainer.setMaximumSize(new java.awt.Dimension(1360, 690));
        panelsSliderContainer.setPreferredSize(new java.awt.Dimension(1360, 690));

        miniCPUContainer.setkEndColor(new java.awt.Color(108, 194, 189));
        miniCPUContainer.setkGradientFocus(2000);
        miniCPUContainer.setkStartColor(new java.awt.Color(255, 193, 167));
        miniCPUContainer.setName("miniCPUContainer"); // NOI18N
        miniCPUContainer.setPreferredSize(new java.awt.Dimension(1360, 700));
        miniCPUContainer.setLayout(null);

        arrivalTimePanel.setBackground(new java.awt.Color(100, 176, 170));
        arrivalTimePanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        arrivalTimeTag.setFont(new java.awt.Font("Bodoni MT", 1, 22)); // NOI18N
        arrivalTimeTag.setForeground(new java.awt.Color(255, 255, 255));
        arrivalTimeTag.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        arrivalTimeTag.setText("Indique el tiempo de llegada de los procesos");

        firstProcessesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nombre archivo", "ID Proceso", "Tiempo de llegada"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        firstProcessesTable.setFocusable(false);
        firstProcessesTable.setRowHeight(20);
        firstProcessesTable.setRowSelectionAllowed(false);
        firstProcessesTable.setSelectionBackground(new java.awt.Color(255, 255, 255));
        firstProcessesScrollPane.setViewportView(firstProcessesTable);
        firstProcessesTable.getTableHeader().setFont(new Font("Bodoni MT", Font.BOLD, 14));
        ((DefaultTableCellRenderer)IRTable.getTableHeader().getDefaultRenderer())
        .setHorizontalAlignment(JLabel.CENTER);

        DefaultTableCellRenderer firstProcessesTableCenterRenderer = new DefaultTableCellRenderer();
        firstProcessesTableCenterRenderer.setHorizontalAlignment(JLabel.CENTER);

        firstProcessesTable.getColumnModel().getColumn(0).setCellRenderer(firstProcessesTableCenterRenderer);
        firstProcessesTable.getColumnModel().getColumn(1).setCellRenderer(firstProcessesTableCenterRenderer);
        firstProcessesTable.getColumnModel().getColumn(2).setCellRenderer(firstProcessesTableCenterRenderer);

        arrivalTimeButtonAccept.setBackground(new java.awt.Color(100, 176, 170));
        arrivalTimeButtonAccept.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Images/button_aceptar.png"))); // NOI18N
        arrivalTimeButtonAccept.setActionCommand("arrivalTimeAccept");
        arrivalTimeButtonAccept.setBorderPainted(false);
        arrivalTimeButtonAccept.setContentAreaFilled(false);
        arrivalTimeButtonAccept.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        arrivalTimeButtonAccept.setFocusPainted(false);
        arrivalTimeButtonAccept.setFocusable(false);

        javax.swing.GroupLayout arrivalTimePanelLayout = new javax.swing.GroupLayout(arrivalTimePanel);
        arrivalTimePanel.setLayout(arrivalTimePanelLayout);
        arrivalTimePanelLayout.setHorizontalGroup(
            arrivalTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(arrivalTimePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(arrivalTimeTag, javax.swing.GroupLayout.PREFERRED_SIZE, 387, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(72, 72, 72))
            .addGroup(arrivalTimePanelLayout.createSequentialGroup()
                .addGroup(arrivalTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(arrivalTimePanelLayout.createSequentialGroup()
                        .addGap(36, 36, 36)
                        .addComponent(firstProcessesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(arrivalTimePanelLayout.createSequentialGroup()
                        .addGap(151, 151, 151)
                        .addComponent(arrivalTimeButtonAccept)))
                .addContainerGap(36, Short.MAX_VALUE))
        );
        arrivalTimePanelLayout.setVerticalGroup(
            arrivalTimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(arrivalTimePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(arrivalTimeTag)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(firstProcessesScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(arrivalTimeButtonAccept)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        miniCPUContainer.add(arrivalTimePanel);
        arrivalTimePanel.setBounds(510, 130, 530, 290);
        arrivalTimePanel.setVisible(false);

        processesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Color", "ID", "Llegada", "Nombre", "Estado", "PC", "AC", "AX", "BX", "CX", "DX", "Pl V1", "Pl V2", "Pl V3", "Pl V4", "Pl V5"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        processesTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        processesTable.setEnabled(false);
        processesTable.setFocusable(false);
        processesTable.setGridColor(new java.awt.Color(255, 255, 255));
        processesTable.setRowHeight(17);
        processesTable.setRowSelectionAllowed(false);
        processesTable.setSelectionBackground(new java.awt.Color(255, 255, 255));
        processesScrollPane.setViewportView(processesTable);
        processesTable.getTableHeader().setFont(new Font("Bodoni MT", Font.BOLD, 14));
        ((DefaultTableCellRenderer)processesTable.getTableHeader().getDefaultRenderer())
        .setHorizontalAlignment(JLabel.CENTER);

        miniCPUContainer.add(processesScrollPane);
        processesScrollPane.setBounds(356, 102, 992, 153);

        headerContainer.setBackground(new java.awt.Color(100, 176, 170));
        headerContainer.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        headerContainer.setPreferredSize(new java.awt.Dimension(100, 60));

        openFilesButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        openFilesButton.setForeground(new java.awt.Color(255, 255, 255));
        openFilesButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Images/open_folder.png"))); // NOI18N
        openFilesButton.setText("Abrir archivos");
        openFilesButton.setActionCommand("openFiles");
        openFilesButton.setBorderPainted(false);
        openFilesButton.setContentAreaFilled(false);
        openFilesButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        openFilesButton.setFocusPainted(false);
        openFilesButton.setFocusable(false);
        openFilesButton.setName("openFilesButton"); // NOI18N

        startButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        startButton.setForeground(new java.awt.Color(255, 255, 255));
        startButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Images/start.png"))); // NOI18N
        startButton.setText("Iniciar ejecución");
        startButton.setToolTipText("Presione para empezar la simulación");
        startButton.setActionCommand("startExecution");
        startButton.setBorderPainted(false);
        startButton.setContentAreaFilled(false);
        startButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        startButton.setEnabled(false);
        startButton.setFocusPainted(false);
        startButton.setFocusable(false);
        startButton.setName("openFilesButton"); // NOI18N

        configButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        configButton.setForeground(new java.awt.Color(255, 255, 255));
        configButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Images/settings.png"))); // NOI18N
        configButton.setText("Configuraciones");
        configButton.setActionCommand("openConfig");
        configButton.setBorderPainted(false);
        configButton.setContentAreaFilled(false);
        configButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        configButton.setFocusPainted(false);
        configButton.setFocusable(false);
        configButton.setName("openFilesButton"); // NOI18N

        cpuTimeTitle.setBackground(new java.awt.Color(176, 195, 191));
        cpuTimeTitle.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cpuTimeTitle.setForeground(new java.awt.Color(255, 255, 255));
        cpuTimeTitle.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Images/time.png"))); // NOI18N
        cpuTimeTitle.setText("Tiempo de la CPU:");

        cpuTimeValue.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        cpuTimeValue.setForeground(new java.awt.Color(255, 255, 255));
        cpuTimeValue.setText("-");

        javax.swing.GroupLayout headerContainerLayout = new javax.swing.GroupLayout(headerContainer);
        headerContainer.setLayout(headerContainerLayout);
        headerContainerLayout.setHorizontalGroup(
            headerContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerContainerLayout.createSequentialGroup()
                .addComponent(openFilesButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(startButton)
                .addGap(186, 186, 186)
                .addComponent(cpuTimeTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cpuTimeValue, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(configButton))
        );
        headerContainerLayout.setVerticalGroup(
            headerContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(headerContainerLayout.createSequentialGroup()
                .addGroup(headerContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openFilesButton)
                    .addComponent(startButton)
                    .addComponent(configButton)
                    .addComponent(cpuTimeTitle)
                    .addComponent(cpuTimeValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        miniCPUContainer.add(headerContainer);
        headerContainer.setBounds(0, 0, 1360, 60);

        memoryTagContainer.setBackground(new java.awt.Color(173, 56, 82));
        memoryTagContainer.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        memoryTag.setFont(new java.awt.Font("Bodoni MT", 1, 17)); // NOI18N
        memoryTag.setForeground(new java.awt.Color(255, 255, 255));
        memoryTag.setText("Memoria");

        javax.swing.GroupLayout memoryTagContainerLayout = new javax.swing.GroupLayout(memoryTagContainer);
        memoryTagContainer.setLayout(memoryTagContainerLayout);
        memoryTagContainerLayout.setHorizontalGroup(
            memoryTagContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(memoryTagContainerLayout.createSequentialGroup()
                .addGap(118, 118, 118)
                .addComponent(memoryTag)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        memoryTagContainerLayout.setVerticalGroup(
            memoryTagContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(memoryTag, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        miniCPUContainer.add(memoryTagContainer);
        memoryTagContainer.setBounds(12, 68, 337, 27);

        processesTagContainer.setBackground(new java.awt.Color(90, 129, 158));
        processesTagContainer.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        processesTag.setFont(new java.awt.Font("Bodoni MT", 1, 17)); // NOI18N
        processesTag.setForeground(new java.awt.Color(255, 255, 255));
        processesTag.setText("Procesos");

        javax.swing.GroupLayout processesTagContainerLayout = new javax.swing.GroupLayout(processesTagContainer);
        processesTagContainer.setLayout(processesTagContainerLayout);
        processesTagContainerLayout.setHorizontalGroup(
            processesTagContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, processesTagContainerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(processesTag)
                .addGap(458, 458, 458))
        );
        processesTagContainerLayout.setVerticalGroup(
            processesTagContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(processesTag, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        miniCPUContainer.add(processesTagContainer);
        processesTagContainer.setBounds(356, 68, 992, 27);

        executionTagContainer.setBackground(new java.awt.Color(173, 56, 82));
        executionTagContainer.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        executionTag.setFont(new java.awt.Font("Bodoni MT", 1, 17)); // NOI18N
        executionTag.setForeground(new java.awt.Color(255, 255, 255));
        executionTag.setText("Ejecución");

        javax.swing.GroupLayout executionTagContainerLayout = new javax.swing.GroupLayout(executionTagContainer);
        executionTagContainer.setLayout(executionTagContainerLayout);
        executionTagContainerLayout.setHorizontalGroup(
            executionTagContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, executionTagContainerLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(executionTag)
                .addGap(458, 458, 458))
        );
        executionTagContainerLayout.setVerticalGroup(
            executionTagContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(executionTag, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        miniCPUContainer.add(executionTagContainer);
        executionTagContainer.setBounds(356, 262, 992, 27);

        coresTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        coresTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"Núcleo 1", null, null},
                {"Núcleo 2", null, null},
                {"Núcleo 3", null, null},
                {"Núcleo 4", null, null},
                {"Núcleo 5", null, null}
            },
            new String [] {
                "Núcleo", "Proceso", "Ráfaga"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        coresTable.setFocusable(false);
        coresTable.setRowHeight(25);
        coresTable.setRowSelectionAllowed(false);
        coresTable.setSelectionBackground(new java.awt.Color(255, 255, 255));
        coresScrollPane.setViewportView(coresTable);
        coresTable.getTableHeader().setFont(new Font("Bodoni MT", Font.BOLD, 14));
        ((DefaultTableCellRenderer)coresTable.getTableHeader().getDefaultRenderer())
        .setHorizontalAlignment(JLabel.CENTER);

        DefaultTableCellRenderer coresTableCenterRenderer = new DefaultTableCellRenderer();
        coresTableCenterRenderer.setHorizontalAlignment(JLabel.CENTER);

        coresTable.getColumnModel().getColumn(0).setCellRenderer(coresTableCenterRenderer);
        coresTable.getColumnModel().getColumn(1).setCellRenderer(coresTableCenterRenderer);
        coresTable.getColumnModel().getColumn(2).setCellRenderer(coresTableCenterRenderer);

        coresTable.getTableHeader().setPreferredSize(new Dimension(10, 25));

        miniCPUContainer.add(coresScrollPane);
        coresScrollPane.setBounds(356, 296, 200, 152);

        IRTable.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        IRTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"IR Núcleo 1", null},
                {"IR Núcleo 2", null},
                {"IR Núcleo 3", null},
                {"IR Núcleo 4", null},
                {"IR Núcleo 5", null}
            },
            new String [] {
                "IR", "Instrucción"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        IRTable.setFocusable(false);
        IRTable.setRowHeight(25);
        IRTable.setRowSelectionAllowed(false);
        IRTable.setSelectionBackground(new java.awt.Color(255, 255, 255));
        IRScrollPane.setViewportView(IRTable);
        IRTable.getTableHeader().setFont(new Font("Bodoni MT", Font.BOLD, 14));
        ((DefaultTableCellRenderer)IRTable.getTableHeader().getDefaultRenderer())
        .setHorizontalAlignment(JLabel.CENTER);

        DefaultTableCellRenderer centerRenderer1 = new DefaultTableCellRenderer();
        centerRenderer1.setHorizontalAlignment(JLabel.CENTER);

        IRTable.getColumnModel().getColumn(0).setCellRenderer(centerRenderer1);
        IRTable.getColumnModel().getColumn(1).setCellRenderer(centerRenderer1);

        IRTable.getColumnModel().getColumn(0).setPreferredWidth(1);
        IRTable.getColumnModel().getColumn(1).setPreferredWidth(130);

        IRTable.getTableHeader().setPreferredSize(new Dimension(10, 25));

        miniCPUContainer.add(IRScrollPane);
        IRScrollPane.setBounds(1079, 296, 269, 153);

        executionScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        executionScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        executionScrollPane.setEnabled(false);

        executionTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6", "Title 7", "Title 8", "Title 9", "Title 10", "Title 11", "Title 12", "Title 13", "Title 14", "Title 15", "Title 16", "Title 17", "Title 18", "Title 19", "Title 20", "Title 21", "Title 22", "Title 23", "Title 24", "Title 25", "Title 26", "Title 27", "Title 28", "Title 29", "Title 30", "Title 31", "Title 32", "Title 33", "Title 34", "Title 35"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        executionTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        executionTable.setEnabled(false);
        executionTable.setFocusable(false);
        executionTable.setRowHeight(25);
        executionTable.setRowSelectionAllowed(false);
        executionTable.setSelectionBackground(new java.awt.Color(255, 255, 255));
        executionScrollPane.setViewportView(executionTable);
        executionTable.setTableHeader(null);

        for(int i = 0; i < executionTable.getColumnCount(); i++){
            executionTable.getColumnModel().getColumn(i).setPreferredWidth(60);
        }

        miniCPUContainer.add(executionScrollPane);
        executionScrollPane.setBounds(562, 296, 510, 176);

        memoriesTabbedPane.setBackground(new java.awt.Color(255, 255, 255));
        memoriesTabbedPane.setFocusable(false);
        memoriesTabbedPane.setFont(new java.awt.Font("Bodoni MT", 0, 14)); // NOI18N

        mainMemoryPanelContainer.setBackground(new java.awt.Color(255, 255, 255));
        mainMemoryPanelContainer.setAutoscrolls(true);

        mainMemoryScrollPane.setBackground(new java.awt.Color(255, 255, 255));
        mainMemoryScrollPane.setBorder(null);
        mainMemoryScrollPane.setFocusable(false);

        mainMemoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Posición", "Valor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        mainMemoryTable.setFocusable(false);
        mainMemoryTable.setGridColor(new java.awt.Color(255, 255, 255));
        mainMemoryTable.setRowSelectionAllowed(false);
        mainMemoryTable.setSelectionBackground(new java.awt.Color(255, 255, 255));
        mainMemoryScrollPane.setViewportView(mainMemoryTable);
        mainMemoryTable.getTableHeader().setFont(new Font("Bodoni MT", Font.PLAIN, 14));
        ((DefaultTableCellRenderer)coresTable.getTableHeader().getDefaultRenderer())
        .setHorizontalAlignment(JLabel.CENTER);

        javax.swing.GroupLayout mainMemoryPanelContainerLayout = new javax.swing.GroupLayout(mainMemoryPanelContainer);
        mainMemoryPanelContainer.setLayout(mainMemoryPanelContainerLayout);
        mainMemoryPanelContainerLayout.setHorizontalGroup(
            mainMemoryPanelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainMemoryScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
        );
        mainMemoryPanelContainerLayout.setVerticalGroup(
            mainMemoryPanelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(mainMemoryScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
        );

        memoriesTabbedPane.addTab("Principal", mainMemoryPanelContainer);

        secondaryMemoryPanelContainer.setBackground(new java.awt.Color(255, 255, 255));
        secondaryMemoryPanelContainer.setAutoscrolls(true);

        secondaryMemoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Posición", "Valor"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        secondaryMemoryTable.setFocusable(false);
        secondaryMemoryTable.setGridColor(new java.awt.Color(255, 255, 255));
        secondaryMemoryTable.setRowSelectionAllowed(false);
        secondaryMemoryTable.setSelectionBackground(new java.awt.Color(255, 255, 255));
        secondaryMemoryScrollPane.setViewportView(secondaryMemoryTable);
        secondaryMemoryTable.getTableHeader().setFont(new Font("Bodoni MT", Font.PLAIN, 14));
        ((DefaultTableCellRenderer)coresTable.getTableHeader().getDefaultRenderer())
        .setHorizontalAlignment(JLabel.CENTER);

        javax.swing.GroupLayout secondaryMemoryPanelContainerLayout = new javax.swing.GroupLayout(secondaryMemoryPanelContainer);
        secondaryMemoryPanelContainer.setLayout(secondaryMemoryPanelContainerLayout);
        secondaryMemoryPanelContainerLayout.setHorizontalGroup(
            secondaryMemoryPanelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(secondaryMemoryScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
        );
        secondaryMemoryPanelContainerLayout.setVerticalGroup(
            secondaryMemoryPanelContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(secondaryMemoryScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 529, Short.MAX_VALUE)
        );

        memoriesTabbedPane.addTab("Secundaria", secondaryMemoryPanelContainer);

        miniCPUContainer.add(memoriesTabbedPane);
        memoriesTabbedPane.setBounds(12, 102, 337, 560);

        statisticsTagContainer.setBackground(new java.awt.Color(173, 56, 82));
        statisticsTagContainer.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        statisticsTag.setFont(new java.awt.Font("Bodoni MT", 1, 17)); // NOI18N
        statisticsTag.setForeground(new java.awt.Color(255, 255, 255));
        statisticsTag.setText("Estadísticas");

        javax.swing.GroupLayout statisticsTagContainerLayout = new javax.swing.GroupLayout(statisticsTagContainer);
        statisticsTagContainer.setLayout(statisticsTagContainerLayout);
        statisticsTagContainerLayout.setHorizontalGroup(
            statisticsTagContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statisticsTagContainerLayout.createSequentialGroup()
                .addContainerGap(293, Short.MAX_VALUE)
                .addComponent(statisticsTag)
                .addGap(271, 271, 271))
        );
        statisticsTagContainerLayout.setVerticalGroup(
            statisticsTagContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statisticsTag, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        miniCPUContainer.add(statisticsTagContainer);
        statisticsTagContainer.setBounds(696, 479, 652, 27);

        displayTable.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        displayTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {""},
                {null},
                {null},
                {null},
                {null},
                {null},
                {null}
            },
            new String [] {
                "Title 1"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        displayTable.setFocusable(false);
        displayTable.setGridColor(new java.awt.Color(255, 255, 255));
        displayTable.setRowHeight(21);
        displayTable.setRowSelectionAllowed(false);
        displayTable.setSelectionBackground(new java.awt.Color(255, 255, 255));
        displayScrollPane.setViewportView(displayTable);
        DefaultTableCellRenderer displayTableCenterRenderer = new DefaultTableCellRenderer();
        displayTableCenterRenderer.setHorizontalAlignment(JLabel.CENTER);

        displayTable.getColumnModel().getColumn(0).setCellRenderer(displayTableCenterRenderer);

        displayTable.setTableHeader(null);

        miniCPUContainer.add(displayScrollPane);
        displayScrollPane.setBounds(356, 513, 333, 150);

        statisticsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "H. inicio", "H. fin", "T. inicio", "T. fin", "Tr", "Tr/Ts"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        statisticsTable.setFocusable(false);
        statisticsTable.setRowHeight(17);
        statisticsTable.setRowSelectionAllowed(false);
        statisticsTable.setSelectionBackground(new java.awt.Color(255, 255, 255));
        statisticsScrollPane.setViewportView(statisticsTable);
        statisticsTable.getTableHeader().setFont(new Font("Bodoni MT", Font.BOLD, 14));
        ((DefaultTableCellRenderer)statisticsTable.getTableHeader().getDefaultRenderer())
        .setHorizontalAlignment(JLabel.CENTER);

        miniCPUContainer.add(statisticsScrollPane);
        statisticsScrollPane.setBounds(696, 513, 508, 150);

        displayTagContainer.setBackground(new java.awt.Color(90, 129, 158));
        displayTagContainer.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        displayTag.setFont(new java.awt.Font("Bodoni MT", 1, 17)); // NOI18N
        displayTag.setForeground(new java.awt.Color(255, 255, 255));
        displayTag.setText("Pantalla");

        javax.swing.GroupLayout displayTagContainerLayout = new javax.swing.GroupLayout(displayTagContainer);
        displayTagContainer.setLayout(displayTagContainerLayout);
        displayTagContainerLayout.setHorizontalGroup(
            displayTagContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayTagContainerLayout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addComponent(displayTag)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        displayTagContainerLayout.setVerticalGroup(
            displayTagContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(displayTag, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        miniCPUContainer.add(displayTagContainer);
        displayTagContainer.setBounds(356, 479, 333, 27);

        trAveragePanel.setBackground(new java.awt.Color(95, 125, 154));

        trAverageTitle.setFont(new java.awt.Font("Bodoni MT", 1, 15)); // NOI18N
        trAverageTitle.setForeground(new java.awt.Color(255, 255, 255));
        trAverageTitle.setText("Promedio Tr");

        trAverageValue.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        trAverageValue.setForeground(new java.awt.Color(255, 255, 255));
        trAverageValue.setText("0.0");

        javax.swing.GroupLayout trAveragePanelLayout = new javax.swing.GroupLayout(trAveragePanel);
        trAveragePanel.setLayout(trAveragePanelLayout);
        trAveragePanelLayout.setHorizontalGroup(
            trAveragePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trAveragePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(trAveragePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(trAverageTitle)
                    .addComponent(trAverageValue))
                .addContainerGap(48, Short.MAX_VALUE))
        );
        trAveragePanelLayout.setVerticalGroup(
            trAveragePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trAveragePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(trAverageTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(trAverageValue)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        miniCPUContainer.add(trAveragePanel);
        trAveragePanel.setBounds(1211, 513, 137, 70);

        trTsAveragePanel.setBackground(new java.awt.Color(72, 44, 64));

        trTsAverageTitle.setFont(new java.awt.Font("Bodoni MT", 1, 15)); // NOI18N
        trTsAverageTitle.setForeground(new java.awt.Color(255, 255, 255));
        trTsAverageTitle.setText("Promedio Tr / Ts");

        trTsAverageValue.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        trTsAverageValue.setForeground(new java.awt.Color(255, 255, 255));
        trTsAverageValue.setText("0.0");

        javax.swing.GroupLayout trTsAveragePanelLayout = new javax.swing.GroupLayout(trTsAveragePanel);
        trTsAveragePanel.setLayout(trTsAveragePanelLayout);
        trTsAveragePanelLayout.setHorizontalGroup(
            trTsAveragePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trTsAveragePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(trTsAveragePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(trTsAverageTitle)
                    .addComponent(trTsAverageValue))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        trTsAveragePanelLayout.setVerticalGroup(
            trTsAveragePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(trTsAveragePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(trTsAverageTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(trTsAverageValue)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        miniCPUContainer.add(trTsAveragePanel);
        trTsAveragePanel.setBounds(1210, 590, 137, 72);

        panelsSliderContainer.add(miniCPUContainer, "card2");

        configContainer.setkEndColor(new java.awt.Color(108, 194, 189));
        configContainer.setkGradientFocus(2000);
        configContainer.setkStartColor(new java.awt.Color(255, 193, 167));
        configContainer.setMaximumSize(new java.awt.Dimension(1360, 690));
        configContainer.setName("configContainer"); // NOI18N

        backToCPUButton.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        backToCPUButton.setForeground(new java.awt.Color(255, 255, 255));
        backToCPUButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/GUI/Images/back.png"))); // NOI18N
        backToCPUButton.setToolTipText("");
        backToCPUButton.setActionCommand("backToMiniCPU");
        backToCPUButton.setBorderPainted(false);
        backToCPUButton.setContentAreaFilled(false);
        backToCPUButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        backToCPUButton.setFocusPainted(false);
        backToCPUButton.setFocusable(false);
        backToCPUButton.setName("openFilesButton"); // NOI18N
        backToCPUButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backToCPUButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout configContainerLayout = new javax.swing.GroupLayout(configContainer);
        configContainer.setLayout(configContainerLayout);
        configContainerLayout.setHorizontalGroup(
            configContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backToCPUButton, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1279, Short.MAX_VALUE))
        );
        configContainerLayout.setVerticalGroup(
            configContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(configContainerLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backToCPUButton)
                .addContainerGap(619, Short.MAX_VALUE))
        );

        panelsSliderContainer.add(configContainer, "card2");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(panelsSliderContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(panelsSliderContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backToCPUButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backToCPUButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_backToCPUButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane IRScrollPane;
    public javax.swing.JTable IRTable;
    public javax.swing.JButton arrivalTimeButtonAccept;
    public javax.swing.JPanel arrivalTimePanel;
    private javax.swing.JLabel arrivalTimeTag;
    public javax.swing.JButton backToCPUButton;
    public javax.swing.JButton configButton;
    public keeptoo.KGradientPanel configContainer;
    private javax.swing.JScrollPane coresScrollPane;
    public javax.swing.JTable coresTable;
    private javax.swing.JLabel cpuTimeTitle;
    public javax.swing.JLabel cpuTimeValue;
    private javax.swing.JScrollPane displayScrollPane;
    public javax.swing.JTable displayTable;
    private javax.swing.JLabel displayTag;
    private javax.swing.JPanel displayTagContainer;
    private javax.swing.JScrollPane executionScrollPane;
    public javax.swing.JTable executionTable;
    private javax.swing.JLabel executionTag;
    private javax.swing.JPanel executionTagContainer;
    private javax.swing.JScrollPane firstProcessesScrollPane;
    public javax.swing.JTable firstProcessesTable;
    private javax.swing.JPanel headerContainer;
    private javax.swing.JPanel mainMemoryPanelContainer;
    private javax.swing.JScrollPane mainMemoryScrollPane;
    public javax.swing.JTable mainMemoryTable;
    private javax.swing.JTabbedPane memoriesTabbedPane;
    private javax.swing.JLabel memoryTag;
    private javax.swing.JPanel memoryTagContainer;
    public keeptoo.KGradientPanel miniCPUContainer;
    public javax.swing.JButton openFilesButton;
    public rojerusan.RSPanelsSlider panelsSliderContainer;
    private javax.swing.JScrollPane processesScrollPane;
    public javax.swing.JTable processesTable;
    private javax.swing.JLabel processesTag;
    private javax.swing.JPanel processesTagContainer;
    private javax.swing.JPanel secondaryMemoryPanelContainer;
    private javax.swing.JScrollPane secondaryMemoryScrollPane;
    public javax.swing.JTable secondaryMemoryTable;
    public javax.swing.JButton startButton;
    private javax.swing.JScrollPane statisticsScrollPane;
    public javax.swing.JTable statisticsTable;
    private javax.swing.JLabel statisticsTag;
    private javax.swing.JPanel statisticsTagContainer;
    private javax.swing.JPanel trAveragePanel;
    private javax.swing.JLabel trAverageTitle;
    public javax.swing.JLabel trAverageValue;
    private javax.swing.JPanel trTsAveragePanel;
    private javax.swing.JLabel trTsAverageTitle;
    public javax.swing.JLabel trTsAverageValue;
    // End of variables declaration//GEN-END:variables
}
